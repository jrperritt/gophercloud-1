#!/bin/bash
set -euo pipefail

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source "${SCRIPT_DIR}/lib.sh"

NEW_VERSION=${1:-}
REMOTE="release"
REMOTE_URL="git@github.com:gophercloud/cli.git"


# BRANCH
get_branch

echo "Releasing new version: ${NEW_VERSION}"

#
# First confirm we're operating on the master branch
#

if [ "$BRANCH" != "master" ]; then
  echo "Must release from master branch"
  exit 1
fi

#
# Confirm that we have a remote named "Release"
#

git remote show ${REMOTE} &> /dev/null

rc=$?

if [[ $rc != 0 ]]; then
  echo "Remote \"${REMOTE}\" not found. Exiting."
  exit 2
fi

#
# Now confirm that we've got the proper remote URL
#

REMOTE_ACTUAL_URL=$(git remote show release | grep Push | cut -d ":" -f2- | xargs)

if [ "$REMOTE_URL" != "$REMOTE_ACTUAL_URL" ]; then
  echo -e "Remote \"${REMOTE}\" PUSH url incorrect.\nShould be ${REMOTE_URL}. Exiting."
  exit 3
fi

#
# Confirm our workspace is clean
#

set +e
git diff --exit-code > /dev/null
if [ $? != 0 ]; then
  echo "Workspace is not clean. Exiting"
  exit 4
fi
set -e

#
# Ensure we're in sync with release remote
#

git fetch $REMOTE
SYNC_STATUS=$(git rev-list master...${REMOTE}/master)

if [ -n "$SYNC_STATUS" ]; then
  echo "Master is not in sync with release remote. Exiting."
  exit 5
fi

update_docs "${NEW_VERSION}"

#
# Commit and push the code changes
#

git commit -am "Version ${NEW_VERSION}"
git tag "${NEW_VERSION}"
git push ${REMOTE} master
git push ${REMOTE} --tags

echo "${NEW_VERSION} successfully released"
